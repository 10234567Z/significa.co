import { PREVIEW_COOKIE_KEY } from '$lib/constants';
import { getStoryblok } from '$lib/storyblok';
import type { ConfigurationStoryblok } from '$types/bloks';
import { error } from '@sveltejs/kit';
import type { ISbStoryData } from '@storyblok/js';
import { fetchCareers } from '$lib/content';

export const load = async ({ cookies, fetch }) => {
  const version: 'draft' | 'published' = cookies.get(PREVIEW_COOKIE_KEY) ? 'draft' : 'published';
  const storyblok = getStoryblok({ fetch });

  try {
    const res = await storyblok.get('cdn/stories/configuration', {
      version,
      resolve_relations:
        'configuration.primary_navigation,configuration.secondary_navigation,footer-column-internal.links'
    });

    return {
      configuration: res.data.story as ISbStoryData<ConfigurationStoryblok>,
      careers: await fetchCareers({ version, fetch }),
      version
    };
  } catch (err) {
    throw error(404, 'Not found');
  }
};

/**
 * TODO: ISR is messing with the form submissions, so disabling for now.
 *
 * we need to either:
 * - figure out how to get the form submissions to work with ISR
 * - do a static build and refactor forms to use client-side JS to submit
 */

// export const config = {
//   isr: {
//     // Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function.
//     // Setting the value to `false` means it will never expire.
//     expiration: 60,

//     // Random token that can be provided in the URL to bypass the cached version of the asset, by requesting the asset
//     // with a __prerender_bypass=<token> cookie.
//     //
//     // Making a `GET` or `HEAD` request with `x-prerender-revalidate: <token>` will force the asset to be re-validated.
//     bypassToken: BYPASS_TOKEN,

//     // List of valid query parameters. Other parameters (such as utm tracking codes) will be ignored,
//     // ensuring that they do not result in content being regenerated unnecessarily
//     allowQuery: ['t']
//   }
// };
